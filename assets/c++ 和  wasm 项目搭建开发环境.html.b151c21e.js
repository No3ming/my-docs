import{r as s,o as n,c as a,a as e,F as p,b as l,d as c}from"./app.dd1f0c8e.js";const t={},o=e("h1",{id:"c-和-wasm-项目搭建开发环境"},[e("a",{class:"header-anchor",href:"#c-和-wasm-项目搭建开发环境"},"#"),l(" c++ 和 wasm 项目搭建开发环境")],-1),r=l("总结一下：公司之前有一些牛逼的工程（移动端的"),i={href:"https://www.cloudream.com/",target:"_blank",rel:"noopener noreferrer"},u=l("虚拟试衣特效"),b=l("了解一下），却没有用上 wasm，简直是极度的浪费，我想抢救一下。"),m=e("p",null,"学习 wasm 的环境搭建过程，以 mac 环境来说",-1),k={href:"https://emcc.zcopy.site/docs/getting_started/downloads/",target:"_blank",rel:"noopener noreferrer"},d=l("安装 emcc"),g=l("，比如我们放包的位置是"),h=e("code",null,"~/emsdk",-1),v=c('<li><p>配置环境，我用的是 mac 的 zsh，所以想要一劳永逸</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~\n<span class="token function">vim</span> .zshrc\n<span class="token comment"># 添加, 保证启动终端就自动设置emcc编译环境， 如果不想这样，那就需要手动source ～/emsdk/emsdk_env.sh</span>\n<span class="token builtin class-name">source</span> ～/emsdk/emsdk_env.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>搭建 c++开发环境</p></li>',2),f=l("安装第三方包管理"),_={href:"https://github.com/microsoft/vcpkg",target:"_blank",rel:"noopener noreferrer"},w=l("vcpkg"),x=l("，这个会有一些坑，执行"),L=e("code",null,"./bootstrap-vcpkg.sh",-1),D=l("的时候会报错，有可能是 gcc 没有安装,"),C=e("code",null,"brew install gcc",-1),E=l(",brew 安装慢？修改 brew 的源"),I=c('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>&quot;</span>\n<span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\n<span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core&quot;</span>\n<span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果还报错试试</p><div class="language-language ext-language line-numbers-mode"><pre class="language-language"><code>CXXFLAGS=&quot;-D_CTERMID_H_&quot; ./bootstrap-vcpkg.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>按照文档应该完成了部署，还有一些问题，我用的是 zsh 不是 bash，首先保证～/.bashrc 存在的</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./vcpkg integrate <span class="token function">bash</span>\n<span class="token comment"># 获取到 source /Users/lidm/vcpkg/scripts/vcpkg_completion.bash 添加到.zshrc</span>\n<span class="token function">vim</span> ~/.zshrc\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li><p>本人 c++菜鸟，mac 下的 c++开发环境不熟悉，所以第一时间使用了 clion 这种 idea</p></li><li><p>创建一个 cmake（cmake 是啥？跨端的资源管理）项目。<br><img src="http://lidomi.oss-cn-shenzhen.aliyuncs.com/image/png/a944a351e62cbcdbe1be4333f20fe840/image.png" alt="image.png"><br> CMakeLists.txt`文件就是用来处理资源包</p></li><li><p>比如我们想使用 GLES2</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/vcpkg\n./vcpkg search GLES\n./vcpkg <span class="token function">install</span> angle\n./vcpkg integrate <span class="token function">install</span>\n<span class="token builtin class-name">cd</span> ~/hello\n// cmake还要多学习了解\ncmake <span class="token builtin class-name">.</span> -DCMAKE_TOOLCHAIN_FILE<span class="token operator">=</span>/Users/lidm/vcpkg/scripts/buildsystems/vcpkg.cmake\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="5"><li>如果 cmake 没有集成这些资源 <code>#include &lt;GLES2/gl2.h&gt;</code> 还报错，那么就要手动集成了，看我的<code>CMakeLists.txt</code></li></ol><div class="language-vim ext-vim line-numbers-mode"><pre class="language-vim"><code><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.15</span><span class="token punctuation">)</span>\n<span class="token function">project</span><span class="token punctuation">(</span>openes<span class="token punctuation">)</span>\n\n<span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_STANDARD <span class="token number">14</span><span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> 声明OUT_DIR\n<span class="token function">set</span><span class="token punctuation">(</span>OUT_DIR <span class="token operator">/</span>Users<span class="token operator">/</span>lidm<span class="token operator">/</span>vcpkg<span class="token operator">/</span>installed<span class="token operator">/</span>x64<span class="token operator">-</span>osx<span class="token operator">/</span><span class="token builtin">include</span><span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span> 包含$<span class="token punctuation">{</span>OUT_DIR<span class="token punctuation">}</span>\n<span class="token function">include_directories</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>OUT_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">add_executable</span><span class="token punctuation">(</span>openes main<span class="token operator">.</span>cpp<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',9),O={start:"6"},T=c('<p>如果没有问题了的话，就可以利用 opengl 进行各种骚操作了</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>emcc main.cpp -s <span class="token assign-left variable">WASM</span><span class="token operator">=</span><span class="token number">1</span> -o hello.html\nemrun --no_browser --port <span class="token number">8080</span> <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),q=l("打开"),z={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},A=l("http://localhost:8080"),R=l("跑起来"),S=e("p",null,"未完待续。。。。。",-1);t.render=function(l,c){const t=s("OutboundLink");return n(),a(p,null,[o,e("p",null,[r,e("a",i,[u,e(t)]),b]),m,e("ol",null,[e("li",null,[e("p",null,[e("a",k,[d,e(t)]),g,h])]),v,e("li",null,[e("p",null,[f,e("a",_,[w,e(t)]),x,L,D,C,E])])]),I,e("ol",O,[e("li",null,[T,e("p",null,[q,e("a",z,[A,e(t)]),R])])]),S],64)};export default t;
