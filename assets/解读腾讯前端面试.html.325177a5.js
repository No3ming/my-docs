import{r as n,o as s,c as a,a as p,F as t,b as e,d as o}from"./app.dd1f0c8e.js";const l={},c=p("h1",{id:"解读腾讯前端面试"},[p("a",{class:"header-anchor",href:"#解读腾讯前端面试"},"#"),e(" 解读腾讯前端面试")],-1),u=e("解读内容来自"),r={href:"https://mp.weixin.qq.com/s/QDF65aC-Ki_G4MWc_MWSFA",target:"_blank",rel:"noopener noreferrer"},i=e("腾讯前端面试"),k=o('<p>电话面试一<br></p><ol><li>合并两个数组。<br></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),b={start:"2"},m=o('<li>内存泄漏。<br> 当声明的内容不再使用后，js 的垃圾回收机制对其没有回收，内存没有释放，导致占用的内存越来越大，就叫做内存泄漏。常见的有，setTimeout 等计算器没有及时卸载；闭包导致；js 引用 dom 元素，使用后没有手动清除。</li><li>闭包。<br> 含义：在一个函数作用域中使用另外一个函数作用域的变量。 实现：<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n     <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> a\n     <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>面向对象理解<br> 对象指的是具体的某一个事物，程序开发中视一个对象为一个基本单元，将数据和方法封装在其中，提高复用性、灵活性和扩展性。 唯一性：具有唯一的标识，可以通过标识找到该对象。 抽象性：具有一致属性和操作的对象抽象成类。 多态性：相同的操作或者方法应用于不用的对象有不同的结果。 继承性：子类可以共享父类的属性和方法。</li>',3),d=e("函数式编程理解。"),f=p("br",null,null,-1),w=e(" 具体可以看"),g={href:"https://www.zhihu.com/question/28292740?sort=created",target:"_blank",rel:"noopener noreferrer"},y=e("什么是函数式编程"),h=e(" 总结一下："),v=p("br",null,null,-1),j=p("ol",null,[p("li",null,[e("函数式编程是一种编程犯式，常见编程范式有函数式编程、 命令式编程、逻辑式编程， 面对对象也是命令式编程的一种。"),p("br")]),p("li",null,[e("函数式编程是数学的一种抽象，把计算的描述转成表达式，函数指的不是计算机的函数，而是数学的函数，一个函数计算的值取决于他的参数，只要参数不变值不会变，将数据和行为分离。"),p("br")]),p("li",null,"函数式语言中，函数是一等公民，不管函数内外，函数都可以作为函数的参数或者返回值，就是所谓的高阶函数。"),p("li",null,[e("函数的不变性带来了，引用透明和无副作用。"),p("br")]),p("li",null,[e("往往可以应用函数式的特性，应用高阶函数、柯理化、闭包，、偏应用函数（一种表达式,你不需要提供函数需要的所有参数,只需要提供部分,或不提供所需参数）。"),p("br")])],-1),x=o('<li>斐波那契数列？怎么优化？<br> 斐波那契数列: 从第三项开始，下一项是前两项的和。[1,1,2,3,5,8] <br> 优化思路：1.以往我们会使用递归来生成数列，但是项数一但多来，就会重复计算，因此可以已经用过的项存起来。2.把递归改成 for 循环， 用变量存储上一次计算出来的两个值，以在下一次计算中使用<br><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fbnq</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> esle <span class="token punctuation">{</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n             <span class="token keyword">return</span> <span class="token number">1</span>\n         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n             obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>\n             <span class="token keyword">return</span> obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n         <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li>http 和 https 区别？ http 是明文传输，https 是密文传输。http 的明文传输有多个缺点，泄漏信息，容易被跨站点请求伪造，被运营商劫持。</li><li>https 建立的过程 客户端向服务器发送 https 请求-&gt; 服务器查询证书，发送证书的描述信息和公钥给客户端 -&gt; 客户端通过可信任的机构验证该证书是否有效和正确 -&gt; 客户端利用该公钥生成一个 hash 传输到服务器，这样双方就可以对传输的信息进行加解秘了。为了防止被伪造证书，所以最好使用地方方可信任机构的证书进行签名。</li><li>对微服务有什么了解？ 微服务是对单体大型应用的一种解耦方案，把原来一个庞大的单体应用拆分成一组组微服务，不管该服务是怎么实现的，但是必须满足应用的功能。带来一些好处，1.一个服务蹦来不至于整个应用崩溃或者说内存泄露。2.更加方便扩大团队开发，提高开发效率。3.不限制于使用单一的开发语言，可以让最合适的开发语言做最合适的事情。但也会给管理上带来压力，如果管理得不好反而适得其反。</li><li>从数组中找出三数之和为 n。 技巧，传递 3 个参数，n， 数组还有需要找多少个数。将找 3 个数降维到找两个数, 降到二维的时候，使用一个对象保存键值对，使用属性查找代码更加简短<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">findList</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      map<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> a <span class="token operator">=</span> n <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>n <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">[</span>n <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">findList</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">,</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">findList</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></li>',5),q=o("<li><p>电话面试 2</p><ol><li>对设计有研究吗？<br> 额，这个？算不上研究，毕竟不是这一行的。个人的理解在前端开发中经常得自己审查 UI 的，注意的点主要有 1.确定主要突出和次要突出。2.合理配色，避免红字蓝底。3.对齐，同一层次统一大小。<br></li><li>红色适合搭配什么颜色，忌讳搭配什么颜色. 红色搭白色，避免搭深色，比如蓝色。</li><li>vue 和 react 的区别 vue 是一种双向绑定的语法推崇数据的驱动的框架，使用 tamplate 模版语法，作者是一个华人尤大大；react 是一种使用 jsx 的推崇事件驱动框架，由 facebook 公司开源。</li><li>react fiber 架构的理解<br> fiber 是一种数据结构，运用在 react diff 算法里面，结构包含兄弟节点、子节点、父节点、当前节点实例，react 中命名为 fiber 树。诞生的原因是，原来 react 是使用递归进行 diff 的，该过程无法被终止也就是会阻塞浏览器渲染，所以必须要有一种可以有效利用浏览器线程的解决方案出现。react 设计一个调度器，利用浏览器的 requestIdleCallback 的接口，选择在浏览器空闲的时候再进行任务分配。任务又有多种优先级进行调配<br> synchronous，与之前的 Stack Reconciler 操作一样，同步执行<br> task，在 next tick 之前执行<br> animation，下一帧之前执行<br> high，在不久的将来立即执行<br> low，稍微延迟执行也没关系<br> offscreen，下一次 render 时或 scroll 时才执行<br> fiber 树在初次渲染的时候会一次性生成，在后面需要 diff 的时候，每生成一个节点会把控制器交给浏览器查找优先级更高的任务，如果没有继续构建节点；如果有优先级更高的任务，将放弃当前的任务，去执行 更高级任务，等有 空闲的时候再重新执行 一遍，而且每个任务都是有过期时间的，如果过期了会放弃任务。</li><li>实现一个 css 框架你有什么思路吗？ 要实现一个 css 框架，有确定一些内容：1.使用 less 还是 scss。2.包含哪些组件内容。3.可配置主题的内容。4.对浏览器的兼容性，比如要兼容 ie9 么？5.支持按需加载？ 基本的几个 css 样式：1.reset.css 处理重置。2.type.css 处理排版。3.grid.css 处理布局。4.base.css 引入全部样式的入口。5.theme.css 负责主题控制。6.各个零件的样式文件 。</li><li>二分查找的时间复杂度怎么求？ 对于一个长度为 n 的数组，使用二分法查找查到是不确定的，最少查找一次，最多查找 log n 次，形成一个对数关系。</li><li>看过算法导论吗？ 没有，看过一些算法结构的教学视频。</li><li>对图有了解吗？ 这是 在问什么？是问图片的构成和分类么？如果是的话 。 图片大概分为两种，有透明通道比如 png 和没有透明通道 jpg，图片都是像素点构成的，每个像素点有 rgba3 个基础色和一个透明度构成，没有透明通道的透明度都为 1。使用矩阵变换像素能给图片带来各种效果。谷歌提出图片格式 webp，在消耗少量 cpu 解码的性能换来大量减少带透明通道图片的占用体积。</li><li>http 建立连接过程，为什么不是四次或两次握手?<br> 第一次握手，客户端询问服务状态是否可以连接；第二次握手，服务端收到握手，向客户端发送握手包；第三次握手，客户端收到握手包，确认建立连接。三次握手是最少的保证连接安全询问，2 次不够，4 次浪费。<br></li><li>做软件管家是怎么分析需求的？最大收获是什么？现在翻盘想想有什么做的好的地方，和可以改进的地方？<br></li><li>天擎的权限管理是怎么做的？<br></li><li>天擎样式是怎么划分的？<br><br> ** 以上根据自己的项目结合 ** <br></li><li>对未来的规划. 经过这几年的工作，我想向资深 web 架构师方向发展，何为前端架构师呢？首先前端架构师要具备稳固的基础知识，知识的广度，产品的认知，快速学习的能力，对技术选型具有决策能力，能在根本上发现问题和解决问题的能力，技术分享是不可少的，技术培训是不可少的，推动技术发展。这就需要很多项目的积累和总结，新技术的调研和应用，源码阅读，算法提高，提高自己的技术教授能力（可以从写博客入门）。目前在技术上想多深入 webassembly 还有算法相关。</li><li>为什么想来深圳工作？ 怎么感觉在套话呢。</li><li>为什么毕业不直接来深圳工作。</li><li>以后对全栈有兴趣吗？ 为人民服务</li><li>对 c++，go 有了解吗？ golang 有开发经验，c++没有过多的了解，但是在我的学习纲目里。</li></ol></li><li><p>三面（现场面试）</p><ol><li><p>前端未来规划？ 向前端架构师靠拢，提高基础知识、大局观念、快速解决问题能力、知识拓展能力，团队基础建设能力，提高新技术实施能力。</p></li><li><p>3 年之后的规划？ 3 年后我想做一个非常有前景的项目合伙人，和团队开拓疆土，利用自己的经验和技术向更广的领域扩展。</p></li><li><p>有明确的想从事的路线吗？to B？to C？全栈？ to B, 我认为 to B 的业务更加要求稳定和扩展性更强，对技术的挑战大、成长快。</p></li><li><p>node 主要用来解决什么问题？</p><ol><li>SSR 同构。2. 各种前端基础脚手架的构建。3. 全栈开发基础。 总得来说给前端开发者更多得扩展能力。</li></ol></li><li><p>node 做 BFF 的优点是什么？</p><ol><li>BFF 和前端的关系更加贴近，前后端语言统一，前端开发着不需要另外学习一门后端语言。2. nodejs 的 json api 开发最佳，而且现在有 typescript 的支持，让 nodejs 脱颖而出.</li></ol></li><li><p>对项目监控这块有什么了解吗？</p></li><li><p>对微服务有了解吗 由单体应用转成为微服务应用，提高开发的灵活性，提高团队开发效率， 让应用不至于由于一个服务出错导致政府应用崩溃，同时有效管理微服务至关重要。</p></li><li><p>聊一聊 docker？ docker，一个服务一个镜像，一套部署多平台运行，不受运行环境的影响，大大减少运维的工作。</p></li><li><p>当时什么从事前端？ 喜欢</p></li><li><p>整个学习历程是什么？ 了解到自学到系统学习，模仿到自我思考。</p></li><li><p>介绍部门团队的情况。 大致介绍团队，主要还是要讲一下自己在团队的位置，自己能为团队做出什么贡献，比如：技术分享、推动团队 react 的使用、推动组件化开发。<br> 提问：<strong>如果有幸加入贵公司，我会负责什么内容？您对我的期望是什么？</strong></p></li></ol></li><li><p>四面（总监面）</p><ol><li>5g 时代的来临对前端有什么机遇与挑战？ 5g 代表着高传输低耗时，以往一些受限于传输效率的技术将大放异彩，比如 vr/ai 技术，可视化应用高速发展的时代已经来临。</li><li>Html4，html5 是建立在 http 上的，http 的下一代要解决什么问题？ 提高安全性，提高交互效率， 比如离线应用等。</li><li>对现在主流前端框架的看法？ vue 简单单不适合构建大型应用，angular 太笨重，react 贴近原生开发，我更希望使用 react 开发。不过这些都是实现业务的工具，应结合当前的业务选择，比如我们在后台管理上使用 react，手机移动页面使用 vue。</li><li>看你有 github，你一般在 github 上做什么呢？ 一般在 github 搜索解决当前问题的代码库，对比较关心常用的库 watch 和交流，自己的学习过程中的代码做存储，我也想做贡献啊，提出一些 issus 算贡献么。</li><li>github 看过什么关于前端项目的源码？ vux UI, react 部分源码。（我觉得我还得多准备）</li><li>向什么源码提过 pr？ gormt 一个 golang 数据库映射工具。vux 。</li><li>restful 接口架构的优缺点？ 优点是对要做的操作有合理分类或者说语义化，对代码结构合理规划。缺点是对后端人员要求更高或者说更多的工作量，有时候前端要多次请求数据来获取需要的数据。</li><li>restful 接口架构会导致什么安全问题，具体怎么解决？ 会无意中暴露业务，比如返回多余的数据，解决方式由前端来控制需要过滤哪些数据；当请求参数包含主从结构时，遗漏权限判断，避免这样的写法，应该使用 token 来区分用户</li><li>团队合作有遇到过分歧吗？最后是怎么解决的？有什么事例最后是采取你建议的解决方案？ 有啊。通过讨论后的结果来决定的。当时商户后台主张我主张用 react，组长认为团队中 react 经验太少来，建议使用 vue。最后我给出几条意见是：1.不要低估我们团队的学习能力。2.vue 在庞大的应用里代码不好规范（v1.0）。3. react 的事件驱动式更适合初级开发人员提高编码能力。4. react 已经非常成熟了， 据我了解已经有很多大厂在推荐使用 react。</li><li>你印象中觉得腾讯工作形式是什么方式呢？ 分工明细，有条不紊，精益求精，敏捷开发。</li><li>为什么想离职？ 想到更加优秀的团队中学习和锻炼自己，大团队经验正正是我所缺乏的。</li></ol></li>",3);l.render=function(e,o){const l=n("OutboundLink");return s(),a(t,null,[c,p("p",null,[u,p("a",r,[i,p(l)])]),p("ol",null,[p("li",null,[k,p("ol",b,[m,p("li",null,[d,f,w,p("a",g,[y,p(l)]),h,v,j]),x])]),q])],64)};export default l;
