import{r as n,o as s,c as a,a as p,F as t,d as o,b as e}from"./app.dd1f0c8e.js";const l={},c=o('<h1 id="typescript-面试内容"><a class="header-anchor" href="#typescript-面试内容">#</a> typescript 面试内容</h1><p>现在似乎很少面试涉及到 typescript(文中简称 ts)，本文收集一些 ts 面试需要准备的内容。 1.js 项目如何升级为 ts？有何影响？</p><ol><li>在原有项目上搭建 ts 环境，同时配置 tsconfig.json, 新版<code>typeRoot</code>可以忽略了</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es6&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',4),r={start:"2"},u=e("添加一个@types 目录，专门存放原来使用 js 来写各个类库的方法"),i=p("code",null,"*.d.ts",-1),k=e("文件,使用方法见"),b={href:"https://www.tslang.cn/docs/handbook/declaration-files/introduction.html",target:"_blank",rel:"noopener noreferrer"},m=e("声明文件"),q=e("."),d=e("针对第三方库先尝试使用"),y=p("code",null,"npm i @types/*",-1),g=e("来安装，如果没有的话需要在"),f=p("code",null,"@types",-1),v=e("目录下添加对于库的声明文件 "),h={href:"https://segmentfault.com/a/1190000018585303",target:"_blank",rel:"noopener noreferrer"},w=e("更多"),j=e("，比如："),x=o('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;jquery&quot;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4.逐渐将原来的 js 代码重构建到 ts。</p><p>2.ts 基础类型都哪些，他们跟 js 的区别。</p><ul><li><p>string 字符串</p></li><li><p>number 数值</p></li><li><p>boolean 布尔</p></li><li><p>string[], number[], Array&lt;number&gt; 固定类型数组</p></li><li><p>[string, number] 元组, 固定下标类型的数组，不同类型的数组</p></li><li><p>enum 枚举, 给一组数值一个友好的标志: enum Color {red, blue = 3} // Color.red === 0 ; Color.blue === 3</p></li><li><p>any 不确定类型</p></li><li><p>void 没有返回值，只可以设置为 null 或者 undefined</p></li><li><p>null 和 undefined， 对应着他们的值，在-staticNullCheck=false 的情况下 null 和 undefined 可以赋值给任何类型，希望是 true。</p></li><li><p>never 永不存在值的类型，是任何类型的子类，可以给赋值给任何类型，但是任何类型不能声明为 naver 类型，any 也不可以。</p></li><li><p>Object 纯属一个对象，可以为数组，{},null, 问题是没有任何属性 obj.attr 是会报错的</p></li><li><p>类型断言</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let len: number = (&lt;string&gt;value).length\n// or\nlet l: number = (value as string).length\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>unkown (3.0 新增)顶级数据类型，在和 any 不同的是在没有确定类型时不能进行操作(x.do())，只能赋值给 unkown 和 any 类型</p><p>3.ts 为什么会流行？与 ECMA 新规范的关系？ 因为 js 是一个弱类型语言，在类型推断相比其他强类型语言有先天弱势，也是导致其代码容易出错的原因之一，容易造成不规范代码； 在这样的背景下，ts 的类型推断给 js 更加牢固的代码规范，同时也因为类型推断加快开发效率。 ES 新规范的发展促进了 typescript 的发展，ts 也是依据 ES 规范的语言。</p><p>4.tslint 都能配置哪些功能？对开发流程有何影响？ tslint 包含了 eslint 的配置，tslint 和 eslint 已经合并。 主要配置信息有： <code>tslint.json</code></p></li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tslint:recommended&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;rulesDirectory&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;linterOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;member-access&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置成员对象的访问权限（public,private,protect)</span>\n    <span class="token property">&quot;member-ordering&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// 设置修饰符顺序</span>\n      <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">&quot;public-static-field&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;public-static-method&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;protected-static-field&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;protected-static-method&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;private-static-field&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;private-static-method&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;public-instance-field&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;protected-instance-field&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;private-instance-field&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;public-constructor&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;protected-constructor&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;private-constructor&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;public-instance-method&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;protected-instance-method&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;private-instance-method&quot;</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// &quot;no-empty-interface&quot;:true,// 不允许空接口</span>\n    <span class="token property">&quot;no-parameter-reassignment&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不允许修改方法输入参数</span>\n    <span class="token property">&quot;prefer-for-of&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 如果for循环中没有使用索引，建议是使用for-of</span>\n    <span class="token comment">// 功能特性</span>\n    <span class="token property">&quot;no-namespace&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;only-arrow-functions&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//禁止使用传统（非箭头）函数表达式</span>\n    <span class="token property">&quot;no-shadowed-variable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许子作用域与外层作用域声明同名变量</span>\n    <span class="token property">&quot;no-string-literal&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;ban-types&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁止内置原始类型</span>\n    <span class="token property">&quot;await-promise&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许没有Promise的情况下使用await</span>\n    <span class="token property">&quot;curly&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// if/for/do/while强制使用大括号</span>\n    <span class="token property">&quot;forin&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 使用for in语句时，强制进行hasOwnProperty检查</span>\n    <span class="token property">&quot;no-arg&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用arguments.callee</span>\n    <span class="token property">&quot;no-bitwise&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用特殊运算符 &amp;, &amp;=, |, |=, ^, ^=, &lt;&lt;, &lt;&lt;=, &gt;&gt;, &gt;&gt;=, &gt;&gt;&gt;, &gt;&gt;&gt;=, ~</span>\n    <span class="token property">&quot;no-conditional-assignment&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// do while/for/if/while 语句中将会对例如if(a=b)进行检查</span>\n    <span class="token property">&quot;no-console&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用console对象</span>\n    <span class="token property">&quot;no-debugger&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用debugger</span>\n    <span class="token property">&quot;no-duplicate-super&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许super() 两次使用在构造函数中</span>\n    <span class="token property">&quot;no-empty&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 函数体不允许空</span>\n    <span class="token property">&quot;no-eval&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用eval</span>\n    <span class="token property">&quot;no-for-in-array&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许对Array使用for-in</span>\n    <span class="token property">&quot;no-invalid-template-strings&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 只允许在模板字符串中使用${</span>\n    <span class="token comment">// &quot;no-invalid-this&quot;:true,// 不允许在class之外使用this</span>\n    <span class="token comment">// &quot;no-null-keyword&quot;:true,// 不允许使用null,使用undefined代替null，指代空指针对象</span>\n    <span class="token property">&quot;no-sparse-arrays&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许array中有空元素</span>\n    <span class="token property">&quot;no-string-throw&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许throw一个字符串</span>\n    <span class="token property">&quot;no-switch-case-fall-through&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许case段落中在没有使用breack的情况下，在新启一段case逻辑</span>\n    <span class="token property">&quot;no-unsafe-finally&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许在finally语句中使用return/continue/break/throw</span>\n    <span class="token property">&quot;no-unused-expression&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用未使用的表达式</span>\n    <span class="token property">&quot;no-use-before-declare&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 在使用前必须声明</span>\n    <span class="token property">&quot;no-var-keyword&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许使用var</span>\n    <span class="token property">&quot;radix&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// parseInt时，必须输入radix精度参数</span>\n    <span class="token comment">// &quot;restrict-plus-operands&quot;:true,// 不允许自动类型转换，如果已设置不允许使用关键字var该设置无效</span>\n    <span class="token property">&quot;triple-equals&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 必须使用恒等号，进行等于比较</span>\n    <span class="token property">&quot;use-isnan&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 只允许使用isNaN方法检查数字是否有效</span>\n\n    <span class="token comment">// 维护性功能</span>\n    <span class="token property">&quot;indent&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;spaces&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 每行开始以4个空格符开始</span>\n    <span class="token property">&quot;max-classes-per-file&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 每个文件中可定义类的个数</span>\n    <span class="token property">&quot;max-file-line-count&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 定义每个文件代码行数</span>\n    <span class="token property">&quot;max-line-length&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 定义每行代码数</span>\n    <span class="token property">&quot;no-default-export&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用export default关键字，因为当export对象名称发生变化时，需要修改import中的对象名。https://github.com/palantir/tslint/issues/1182#issue-151780453</span>\n    <span class="token property">&quot;no-duplicate-imports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 禁止在一个文件内，多次引用同一module</span>\n    <span class="token comment">// 格式</span>\n    <span class="token property">&quot;align&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;parameters&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;arguments&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;statements&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;members&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;elements&quot;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 定义对齐风格</span>\n    <span class="token property">&quot;array-type&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 建议使用T[]方式声明一个数组对象</span>\n    <span class="token property">&quot;class-name&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 类名以大驼峰格式命名</span>\n    <span class="token property">&quot;comment-format&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;check-space&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 定义注释格式</span>\n    <span class="token property">&quot;encoding&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 定义编码格式默认utf-8</span>\n    <span class="token property">&quot;import-spacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// import关键字后加空格</span>\n    <span class="token property">&quot;interface-name&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;always-prefix&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// interface必须以I开头</span>\n    <span class="token property">&quot;jsdoc-format&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 注释基于jsdoc风格</span>\n    <span class="token property">&quot;new-parens&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 调用构造函数时需要用括号</span>\n    <span class="token property">&quot;object-literal-sort-keys&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;no-consecutive-blank-lines&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 不允许有空行</span>\n    <span class="token comment">// &quot;no-trailing-whitespace&quot;: [// 不允许空格结尾</span>\n    <span class="token comment">//     true,</span>\n    <span class="token comment">//     &quot;ignore-comments&quot;,</span>\n    <span class="token comment">//     &quot;ignore-jsdoc&quot;</span>\n    <span class="token comment">// ],</span>\n    <span class="token property">&quot;no-unnecessary-initializer&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许没有必要的初始化</span>\n    <span class="token property">&quot;variable-name&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;check-format&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 定义变量命名规则</span>\n      <span class="token string">&quot;allow-leading-underscore&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;allow-trailing-underscore&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;ban-keywords&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br></div></div><p>5.如何使用 js 实现类型约束，枚举等特性么？</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token keyword">enum</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">enum</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span> <span class="token comment">// enum[&#39;A&#39;] = 0;enum[0] = &#39;A&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token operator">||</span> <span class="token keyword">enum</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// enum = {}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>6.如何理解接口，泛型? 接口理解为一个对象的约束或者说是描述，约束该对象的属性类型，多个同名的接口会被合并。 泛型，在运行的时候才会约束类型，根据输入类型来限制输出类型，类型约束的一个灵活使用方式，首先需要确保输入类型和输出类型的关系，以大写字母变量的形式存储输入值的类型，以让其在函数中及输出是使用。</p>',8);l.render=function(o,e){const l=n("OutboundLink");return s(),a(t,null,[c,p("ol",r,[p("li",null,[u,i,k,p("a",b,[m,p(l)]),q]),p("li",null,[d,y,g,f,v,p("a",h,[w,p(l)]),j])]),x],64)};export default l;
